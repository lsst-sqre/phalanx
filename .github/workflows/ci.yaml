name: CI

env:
  # Current supported Python version. For applications, there is generally no
  # reason to support multiple Python versions, so all actions are run with
  # this version. Quote the version to avoid interpretation as a floating
  # point number.
  PYTHON_VERSION: "3.13"

  # Version of Argo CD to use for the installer.
  ARGO_CD_VERSION: "3.0.6"

  # Version of helm-docs to use for linting.
  HELM_DOCS_VERSION: "1.14.2"

  # Version of Vault client to use for the installer.
  VAULT_VERSION: "1.19.5"

"on":
  merge_group: {}
  pull_request: {}

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-go@v5
        with:
          go-version: '>=1.22'

      - name: Install helm-docs
        run: >
          go install github.com/norwoodj/helm-docs/cmd/helm-docs@v${{ env.HELM_DOCS_VERSION }}
        env:
          GOBIN: /usr/local/bin/

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - uses: astral-sh/setup-uv@v6

      - name: Run linters
        run: uv run --only-group=tox tox run -e lint

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    strategy:
      matrix:
        python:
          - "3.12"
          - "3.13"

    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - uses: astral-sh/setup-uv@v6

      - name: Run Python tests
        run: uv run --only-group=tox tox run -e typing,py,coverage-report

  helm:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: azure/setup-helm@v4
        with:
          # Used to query GitHub for the latest Helm release.
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install helm-unittest plugin
        run: helm plugin install https://github.com/helm-unittest/helm-unittest

      - name: Run helm unittest
        run: helm unittest {applications,charts}/*/tests/..

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - uses: astral-sh/setup-uv@v6

      - name: Run Phalanx Helm linter
        run: uv run --only-group=tox tox run -e phalanx-lint-change

  changes:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    permissions:
      pull-requests: read
    outputs:
      docs: ${{ steps.filter.outputs.docs }}
      docs-specific: ${{ steps.filter.outputs.docs-specific }}
      minikube: ${{ steps.filter.outputs.minikube }}

    steps:
      - uses: actions/checkout@v5

      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            docs:
              - ".github/workflows/docs.yaml"
              - "docs/**"
              - "applications/*/Chart.yaml"
              - "applications/*/values.yaml"
              - "applications/argocd/values-*.yaml"
              - "applications/gafaelfawr/values-*.yaml"
              - "environments/values-*.yaml"
              - "requirements/*.txt"
              - "src/phalanx/**"
            docs-specific:
              - "docs/**"
            minikube:
              - ".github/workflows/ci.yaml"
              - "applications/{argocd,cert-manager,gafaelfawr,ingress-nginx,mobu,postgres,vault-secrets-operator}/Chart.yaml"
              - "applications/{argocd,cert-manager,gafaelfawr,ingress-nginx,mobu,postgres,vault-secrets-operator}/templates/**"
              - "applications/{argocd,cert-manager,gafaelfawr,ingress-nginx,mobu,postgres,vault-secrets-operator}/values.yaml"
              - "applications/{argocd,cert-manager,gafaelfawr,ingress-nginx,mobu,postgres,vault-secrets-operator}/values-minikube.yaml"
              - "environments/templates/applications/infrastructure/*"
              - "environments/values-minikube.yaml"
              - "src/phalanx/**"
              - "uv.lock"

  minikube:
    name: Test deploy
    runs-on: ubuntu-latest
    timeout-minutes: 30

    needs: [test, helm, changes]
    if: >-
      (needs.changes.outputs.minikube == 'true')
      || (github.event_name == 'workflow_dispatch')

    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - uses: astral-sh/setup-uv@v6

      - name: Download installer dependencies
        run: |
          curl -sSL -o /tmp/vault.zip https://releases.hashicorp.com/vault/${{ env.VAULT_VERSION }}/vault_${{ env.VAULT_VERSION }}_linux_amd64.zip
          unzip /tmp/vault.zip
          sudo mv vault /usr/local/bin/vault
          sudo chmod +x /usr/local/bin/vault
          sudo curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/download/v${{ env.ARGO_CD_VERSION }}/argocd-linux-amd64
          sudo chmod +x /usr/local/bin/argocd
          sudo apt-get install socat

      - uses: medyagh/setup-minikube@latest
        with:
          cpus: max
          memory: 5500m  # Linux virtual machines have 7GB of RAM

      - name: Test interaction with the cluster
        run: kubectl get nodes

      - name: Run Phalanx installer
        run: >
          uv run --only-group=tox tox run -e install --
          --force-noninteractive
          --vault-role-id=${{ secrets.MINIKUBE_VAULT_ROLE_ID }}
          --vault-secret-id=${{ secrets.MINIKUBE_VAULT_SECRET_ID }}
          minikube

      - name: Get final list of resources
        run: |
          kubectl get all -A
          kubectl get ingress -A

      - name: Wait for all applications to be healthy
        timeout-minutes: 15
        run: |
          argocd app wait -l "argocd.argoproj.io/instance=science-platform" \
            --port-forward \
            --port-forward-namespace argocd \
            --timeout 300

  docs:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    needs: changes
    if: >-
      (needs.changes.outputs.docs == 'true')
      || (github.event_name == 'workflow_dispatch')

    steps:
      - uses: actions/checkout@v5
        with:
          # Ensure the documentation gets the right version.
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - uses: astral-sh/setup-uv@v6

      - name: Install graphviz
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz

      - name: Build documentation
        run: uv run --only-group=tox tox run -e docs

      # Upload docs:
      # - on pushes to main if *any* documentation content might have changed
      # - on workflow dispatches if any documentation content might have changed
      # - on pushes to tickets/ branches if docs/ directory content changed
      - name: Upload to LSST the Docs
        uses: lsst-sqre/ltd-upload@v1
        with:
          project: "phalanx"
          dir: "docs/_build/html"
          username: ${{ secrets.LTD_USERNAME }}
          password: ${{ secrets.LTD_PASSWORD }}
        if: >-
          (github.event_name == 'push' && github.ref_name == 'main')
          || (github.event_name == 'workflow_dispatch')
          || (github.event_name == 'pull_request'
              && startsWith(github.head_ref, 'tickets/')
              && needs.changes.outputs.docs-specific == 'true')
