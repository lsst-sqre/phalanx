---
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: {{ include "prompt-proto-service.fullname" . }}
spec:
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      containerConcurrency: {{ .Values.containerConcurrency }}
      initContainers:
      - name: init-db-auth
        # Make a copy of the read-only secret that's owned by lsst
        # lsst account is created by main image with id 1000
        image: busybox
        command: ["sh", "-c", "cp -L /app/db-auth-mount/db-auth.yaml /app/dbauth/ && chown 1000:1000 /app/dbauth/db-auth.yaml && chmod u=r,go-rwx /app/dbauth/db-auth.yaml"]
        volumeMounts:
        - mountPath: /app/db-auth-mount
          name: db-auth-mount
          readOnly: true
        - mountPath: /app/dbauth
          name: db-auth-credentials-file
      containers:
      - image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        name: user-container
        env:
        - name: WORKER_COUNT
          value: {{ .Values.containerConcurrency | toString | quote }}
        - name: WORKER_RESTART_FREQ
          value: {{ .Values.worker.restart | toString | quote }}
        - name: WORKER_TIMEOUT
          value: {{ .Values.worker.timeout | toString | quote }}
        - name: WORKER_GRACE_PERIOD
          value: {{ .Values.worker.grace_period | toString | quote }}
        {{- /* Knative not configured for timeouts longer than 1200 seconds, and shouldn't need to be. */ -}}
        {{- $knative_timeout := min 1200 (add (mul 2 (coalesce .Values.worker.timeout 600)) .Values.knative.extraTimeout) }}
        - name: RUBIN_INSTRUMENT
          value: {{ .Values.instrument.name }}
        - name: PREPROCESSING_PIPELINES_CONFIG
          value: {{ .Values.instrument.pipelines.preprocessing }}
        - name: MAIN_PIPELINES_CONFIG
          value: {{ .Values.instrument.pipelines.main }}
        - name: SKYMAP
          value: {{ .Values.instrument.skymap }}
        - name: IMAGE_BUCKET
          value: {{ .Values.s3.imageBucket }}
        - name: BUCKET_TOPIC
          value: {{ .Values.imageNotifications.topic }}
        - name: IMAGE_TIMEOUT
          value: {{ .Values.imageNotifications.imageTimeout | toString | quote }}
        - name: CALIB_REPO
          value: {{ .Values.instrument.calibRepo }}
        - name: LSST_DISABLE_BUCKET_VALIDATION
          value: {{ .Values.s3.disableBucketValidation | toString | quote }}
        - name: CONFIG_APDB
          value: {{ .Values.apdb.config }}
        - name: KAFKA_CLUSTER
          value: {{ .Values.imageNotifications.kafkaClusterAddress }}
        - name: RAW_MICROSERVICE
          value: {{ .Values.raw_microservice }}
        - name: SASQUATCH_URL
          value: {{ .Values.sasquatch.endpointUrl }}
        {{- if and .Values.sasquatch.endpointUrl .Values.sasquatch.auth_env }}
        - name: SASQUATCH_TOKEN
          valueFrom:
            secretKeyRef:
              name: {{ template "prompt-proto-service.fullname" . }}-secret
              key: sasquatch_token
        {{- end }}
        - name: DAF_BUTLER_SASQUATCH_NAMESPACE
          value: {{ .Values.sasquatch.namespace }}
        - name: S3_ENDPOINT_URL
          value: {{ .Values.s3.endpointUrl }}
        {{- if .Values.s3.auth_env }}
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: {{ template "prompt-proto-service.fullname" . }}-secret
              key: s3_access_key
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: {{ template "prompt-proto-service.fullname" . }}-secret
              key: s3_secret_key
        {{- end }}
        {{- if .Values.s3.cred_file_auth }}
        - name: AWS_SHARED_CREDENTIALS_FILE
          value: /app/s3/credentials
        {{- end }}
        - name: LSST_DB_AUTH
          value: /app/lsst-credentials/db-auth.yaml
        - name: AP_KAFKA_PRODUCER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "prompt-proto-service.fullname" . }}-secret
              key: alert_stream_pass
        - name: AP_KAFKA_PRODUCER_USERNAME
          value: {{ .Values.alerts.username}}
        - name: AP_KAFKA_SERVER
          value: {{ .Values.alerts.server}}
        - name: AP_KAFKA_TOPIC
          value: {{ .Values.alerts.topic}}
        - name: LOCAL_REPOS
          value: "/tmp-butler"
        - name: SERVICE_LOG_LEVELS
          value: {{ .Values.logLevel }}
        - name: LOCAL_REPO_CACHE_SIZE
          value: {{ .Values.cache.baseSize | toString | quote }}
        - name: REFCATS_PER_IMAGE
          value: {{ .Values.cache.refcatsPerImage | toString | quote }}
        - name: PATCHES_PER_IMAGE
          value: {{ .Values.cache.patchesPerImage | toString | quote }}
        - name: DEBUG_CACHE_CALIBS
          value: {{ if .Values.cacheCalibs }}'1'{{ else }}'0'{{ end }}
        volumeMounts:
        - mountPath: /tmp-butler
          name: ephemeral
        - mountPath: /app/lsst-credentials
          name: db-auth-credentials-file
          readOnly: true
        {{- if .Values.s3.cred_file_auth }}
        - mountPath: /app/s3/
          name: s3-credentials-file
        {{- end }}
        {{- if .Values.registry.centralRepoFile }}
        - mountPath: {{ .Values.instrument.calibRepo }}
          name: central-repo-file
        {{- end }}
        {{- with .Values.additionalVolumeMounts }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        resources:
          requests:
            cpu: {{ .Values.knative.cpuRequest | toString | quote}}
            ephemeral-storage: {{ .Values.knative.ephemeralStorageRequest }}
            memory: {{ .Values.knative.memoryRequest }}
          limits:
            cpu: {{ .Values.knative.cpuLimit | toString | quote}}
            ephemeral-storage: {{ .Values.knative.ephemeralStorageLimit }}
            memory: {{ .Values.knative.memoryLimit }}
            {{- if .Values.knative.gpu }}
            nvidia.com/gpu: {{ .Values.knative.gpuRequest | toString | quote }}
            {{- end }}
      volumes:
      - name: ephemeral
        emptyDir:
          sizeLimit: {{ .Values.knative.ephemeralStorageLimit }}
      - name: db-auth-mount
        # Temporary mount for db-auth.yaml; cannot be read directly because it's owned by root
        secret:
          secretName: {{ template "prompt-proto-service.fullname" . }}-secret
          defaultMode: 256
          items:
            - key: db-auth_file
              path: db-auth.yaml
      - name: db-auth-credentials-file
        emptyDir:
          sizeLimit: 10Ki  # Just a text file!
      {{- if .Values.s3.cred_file_auth }}
      - name: s3-credentials-file
        secret:
          secretName: {{ template "prompt-proto-service.fullname" . }}-secret
          key: s3-credentials-file
      {{- end }}
      {{- if .Values.registry.centralRepoFile }}
      - name: central-repo-file
        secret:
          secretName: {{ template "prompt-proto-service.fullname" . }}-secret
          items:
          - key: central_repo_file
            path: butler.yaml
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      enableServiceLinks: true
      timeoutSeconds: {{ $knative_timeout }}
      idleTimeoutSeconds: {{ with .Values.knative.idleTimeout }}{{ . }}{{ else }}{{ $knative_timeout }}{{ end }}
      responseStartTimeoutSeconds: {{ with .Values.knative.responseStartTimeout }}{{ . }}{{ else }}{{ $knative_timeout }}{{ end }}
