# -- Flag to enable the given CSC application
enabled: false
# -- Provide an alternate name for the application
nameOverride: ""
# -- This marks the CSC as the primary object to sync upon system starts.
# This is set to false when two CSCs of the same flavor are deployed (one
# real, one simulator) to mark the simulator so it can be filtered out for
# automatic syncing.
isPrimary: true
image:
  # -- The Docker registry name of the container image to use for the CSC
  repository: lsstts/test
  # -- (int) The cycle revision to add to the image tag
  revision:
  # -- The policy to apply when pulling an image for deployment
  pullPolicy: IfNotPresent
# -- The list of pull secrets needed for the images.
# If this section is used, each object listed can have the following attributes defined:
# _name_ (The label identifying the pull-secret to use)
imagePullSecrets: []
# -- This is the namespace in which the CSC will be placed
env: {}
# -- This section holds specifications for secret injection.
# If this section is used, each object listed must have the following attributes defined:
# _name_ (The label for the secret),
# _secretName_ (The name of the vault store reference. Uses the _namespace_ attribute to construct the full name),
# _secretKey_ (The key in the vault store containing the necessary secret)
envSecrets: []
# -- This key allows specification of a script to override the entrypoint
entrypoint:
# -- This key allows specification of a YAML configuration file
# If this section is used, it must contain the following attributes defined:
# _path_ (The container path for the configuration file),
# _filename_ (The configuration file name),
# _content_ (The YAML content for the configuration file)
configfile: {}
# -- This key allows for specification of Butler secret information.
# If this section is used, it must contain the following attributes:
# _containerPath_ (The directory location for the Butler secret),
# _dbUser_ (The username for the Butler backend database),
# _secretFilename_ (The expected secret file name to copy)
butlerSecret: {}
# -- This key specifies the secret files needing to have permissions fixed.
# If this section is used, it must contain the following attributes:
# _containerPath_ (The directory location for the secrets),
# _filenames_ (A list of secret file names),
# _specialInstructions_ (OPTIONAL: A set of shell commads to add to the permission fixing)
secretFixup: {}
# -- This key contains a list of S3 (AWS) credential files to merge into a single aws-credentials.ini file.
s3Credentials: []
# -- This key allows for the specification of a pod security context for volumes.
# If this section is used, it must contain the following attributes:
# _user_ (The user id for the volumes)
# _group_ (The group id for the volumes)
# _fsGroup_ (OPTIONAL: A special supplemental group that applies to all containers in a pod)
securityContext: {}
# -- This section holds the information necessary to create a volume mount for the container.
# If this section is used, each object listed can have the following attributes defined:
# _name_ (A label identifier for the mountpoint),
# _path_ (The path inside the container to mount),
# _accessMode_ (This sets the required access mode for the volume mount),
# _claimSize_ (The requested physical disk space size for the volume mount),
# _storageClass_ (The Kubernetes provided storage class),
# _ids.uid_ (OPTIONAL: An alternative UID for mounting),
# _ids.gid_ (OPTIONAL: An alternative GID for mounting)
pvcMountpoint: []
# -- This section holds the information necessary to create a NFS mount for the container.
# If this section is used, each object listed can have the following attributes defined:
# _name_ (A label identifier for the mountpoint),
# _path_ (The path inside the container to mount),
# _readOnly_ (This sets if the NFS mount is read only or read/write),
# _server_ (The hostname of the NFS server),
# _serverPath_ (The path exported by the NFS server)
nfsMountpoint: []
# -- This allows the specification of pod annotations
annotations: {}
service:
  # -- (bool) This sets the use of a Service API for the application
  use: false
  # -- (int) The port number to use for the Service.
  port:
  # -- (string) The Service type for the application.
  # This is either ClusterIP (internal access) or LoadBalancer (external access)
  type:
# -- This allows the specification of resources (CPU, memory) requires to run the container
resources: {}
# -- This allows the specification of using specific nodes to run the pod
nodeSelector: {}
# -- This specifies the tolerations of the pod for any system taints
tolerations: []
# -- This specifies the scheduling constraints of the pod
affinity: {}
