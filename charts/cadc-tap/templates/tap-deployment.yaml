apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "cadc-tap.fullname" . }}
  labels:
    {{- include "cadc-tap.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "cadc-tap.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: "server"
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "cadc-tap.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: "server"
    spec:
      {{- if .Values.cloudsql.enabled }}
      serviceAccountName: {{ .Values.serviceAccount.name }}
      {{- else }}
      automountServiceAccountToken: false
      {{- end }}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      initContainers:
        - name: "init-tomcat-dirs"
          {{- if eq .Values.config.backend "pg" }}
          image: "{{ .Values.config.pg.image.repository }}:{{ .Values.config.pg.image.tag }}"
          {{- else }}
          image: "{{ .Values.config.qserv.image.repository }}:{{ .Values.config.qserv.image.tag }}"
          {{- end }}
          command:
            - "/bin/bash"
            - "-c"
            - |
              set -e
              mkdir -p /var/lib/tomcat/webapps /var/lib/tomcat/conf
              mkdir -p /var/cache/tomcat/temp
              cp -r /etc/tomcat/* /var/lib/tomcat/conf/
              cp -v /opt/tomcat-wars/*.war /var/lib/tomcat/webapps/
              echo "org.apache.catalina.startup.VersionLoggerListener.level = OFF" >> /var/lib/tomcat/conf/logging.properties
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
            runAsGroup: 1001
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
          volumeMounts:
            - name: "tomcat-base"
              mountPath: "/var/lib/tomcat"
            - name: "tomcat-cache"
              mountPath: "/var/cache/tomcat"
        {{- if .Values.cloudsql.enabled }}
        - name: "cloud-sql-proxy"
          command:
            - "/cloud_sql_proxy"
            - "-ip_address_types=PRIVATE"
            - "-log_debug_stdout=true"
            - "-structured_logs=true"
            - "-instances={{ required "cloudsql.instanceConnectionName must be specified" .Values.cloudsql.instanceConnectionName }}=tcp:5432"
          image: "{{ .Values.cloudsql.image.repository }}:{{ .Values.cloudsql.image.tag }}"
          imagePullPolicy: {{ .Values.cloudsql.image.pullPolicy | quote }}
          {{- with .Values.cloudsql.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          restartPolicy: "Always"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - "all"
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65532
            runAsGroup: 65532
        {{- end }}
      containers:
        - name: "tap-server"
          {{- if eq .Values.config.backend "pg" }}
          image: "{{ .Values.config.pg.image.repository }}:{{ .Values.config.pg.image.tag }}"
          imagePullPolicy: {{ .Values.config.pg.image.pullPolicy | quote }}
          {{- end }}
          {{- if eq .Values.config.backend "qserv" }}
          image: "{{ .Values.config.qserv.image.repository }}:{{ .Values.config.qserv.image.tag }}"
          imagePullPolicy: {{ .Values.config.qserv.image.pullPolicy | quote }}
          {{- end }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
            runAsGroup: 1001
          env:
            - name: CATALINA_OPTS
              value: >-
                -Dtapschemauser.username=TAP_SCHEMA
                -Dtapschemauser.password=TAP_SCHEMA
                -Dtapschemauser.driverClassName=com.mysql.cj.jdbc.Driver
                -Dtapschemauser.url=jdbc:mysql://{{ .Values.config.tapSchemaAddress }}/
                -Dtapschemauser.maxActive=100
                -Duws.driverClassName=org.postgresql.Driver
                -Duws.maxActive=8
                {{- if .Values.cloudsql.enabled }}
                -Duws.password=$UWS_DB_PASSWORD
                -Duws.username={{ required "cloudsql.database must be specified" .Values.cloudsql.database }}
                -Duws.url=jdbc:postgresql://localhost:5432/{{ .Values.cloudsql.database }}
                {{- else }}
                -Duws.username=postgres
                -Duws.url=jdbc:postgresql://{{ template "cadc-tap.fullname" . }}-uws-db/
                {{- end }}
                {{- if eq .Values.config.backend "pg" }}
                -Dtap.username={{ .Values.config.pg.username }}
                -Dtap.password=$TAP_DB_PASSWORD
                -Dtap.url=jdbc:postgresql://{{ .Values.config.pg.host }}/{{ .Values.config.pg.database }}
                -Dtap.maxActive=100
                {{- end }}
                {{- if eq .Values.config.backend "qserv" }}
                -Dqservuser.username=qsmaster
                -Dqservuser.password=$QSERV_DB_PASSWORD
                -Dqservuser.driverClassName=com.mysql.cj.jdbc.Driver
                -Dqservuser.url=jdbc:mysql://{{ .Values.config.qserv.host }}/{{ .Values.config.qserv.jdbcParams }}
                -Dqservuser.maxActive=100
                {{- end }}
                -Dgafaelfawr_url={{ .Values.global.baseUrl }}/auth/api/v1/user-info
                -Dgcs_bucket={{ .Values.config.gcsBucket }}
                -Dgcs_bucket_url={{ .Values.config.gcsBucketUrl }}
                -Dgcs_bucket_type={{ .Values.config.gcsBucketType }}
                -Ddatabase={{ .Values.config.database }}
                 {{- if .Values.config.kafka.enabled }}
                -Dkafka.ssl.truststore=/etc/cadc-tap/kafka/ca.crt
                -Dkafka.ssl.keystore=/etc/cadc-tap/kafka/user.crt
                -Dkafka.ssl.key=/etc/cadc-tap/kafka/user.key
                -Dkafka.query.topic={{ .Values.config.kafka.topics.jobRun }}
                -Dkafka.status.topic={{ .Values.config.kafka.topics.jobStatus }}
                -Dkafka.delete.topic={{ .Values.config.kafka.topics.jobDelete }}
                {{- end }}
                -Dbase_url={{ .Values.global.baseUrl }}
                -Dpath_prefix=/api/{{ .Values.ingress.path }}
                -Dca.nrc.cadc.util.PropertiesReader.dir=/config/
                -Durl.rewrite.enabled={{ .Values.config.urlRewrite.enabled | default true }}
                -Durl.rewrite.rules="{{ .Values.config.urlRewrite.rules | default "ivoa.ObsCore:access_url" }}"
                -Xmx{{ .Values.config.jvmMaxHeapSize }}
            - name: "CATALINA_BASE"
              value: "/var/lib/tomcat"
            - name: "CATALINA_HOME"
              value: "/usr/share/tomcat"
            - name: "HOME"
              value: "/home/tomcat"
            {{- if (and (eq .Values.config.backend "qserv") .Values.config.qserv.passwordEnabled) }}
            - name: "QSERV_DB_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "cadc-tap"
                  key: "qserv-password"
            {{- end }}
            {{- if eq .Values.config.backend "pg" }}
            - name: "TAP_DB_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "cadc-tap"
                  key: "pgpassword"
            {{- end }}
            {{- if .Values.cloudsql.enabled }}
            - name: "UWS_DB_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "cadc-tap"
                  key: "uws-db-password"
            {{- end }}
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: "/etc/creds/google_creds.json"
            {{- if eq .Values.config.gcsBucketType "S3" }}
            - name: "AWS_SECRET_ACCESS_KEY"
              valueFrom:
                secretKeyRef:
                  name: "cadc-tap"
                  key: "AWS_SECRET_ACCESS_KEY"
            - name: "AWS_ACCESS_KEY_ID"
              valueFrom:
                secretKeyRef:
                  name: "cadc-tap"
                  key: "AWS_ACCESS_KEY_ID"
            {{- end }}
            {{- if .Values.config.sentryEnabled }}
            - name: "SENTRY_TRACES_SAMPLE_RATE"
              value: "{{ .Values.config.sentryTracesSampleRate }}"
            - name: "SENTRY_ENVIRONMENT"
              value: {{ .Values.global.host }}
            - name: "SENTRY_RELEASE"
              {{- if eq .Values.config.backend "pg" }}
              value: "{{ .Values.config.pg.image.tag }}"
              {{- else if eq .Values.config.backend "qserv" }}
              value: "{{ .Values.config.qserv.image.tag }}"
              {{- else }}
              value: "{{ .Chart.AppVersion }}"
              {{- end }}
            - name: "SENTRY_DSN"
              valueFrom:
                secretKeyRef:
                  name: "cadc-tap"
                  key: "sentry-dsn"
            {{- end }}
            - name: DATALINK_PAYLOAD_URL
              value: "{{ .Values.config.datalinkPayloadUrl }}"
            {{- if .Values.config.kafka.enabled }}
            - name: KAFKA_BOOTSTRAP_SERVERS
              valueFrom:
                secretKeyRef:
                  key: bootstrapServers
                  name: cadc-tap-kafka-access
            {{- end }}
          ports:
            - containerPort: 8080
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: "google-creds"
              mountPath: "/etc/creds"
              readOnly: true
            - name: "tmp"
              mountPath: "/tmp"
            - name: "config-volume"
              mountPath: "/config"
              readOnly: true
            - name: "tomcat-base"
              mountPath: "/var/lib/tomcat"
            - name: "tomcat-logs"
              mountPath: "/var/log/tomcat"
            - name: "tomcat-home"
              mountPath: "/home/tomcat"
            - name: "tomcat-cache"
              mountPath: "/var/cache/tomcat"
            - name: "ca-trust"
              mountPath: "/etc/pki/ca-trust/source/anchors"
          {{- if .Values.config.kafka.enabled }}
            - name: "kafka-certs"
              mountPath: "/etc/cadc-tap/kafka/ca.crt"
              readOnly: true
              subPath: "ssl.truststore.crt"
            - name: "kafka-certs"
              mountPath: "/etc/cadc-tap/kafka/user.crt"
              readOnly: true
              subPath: "ssl.keystore.crt"
            - name: "kafka-certs"
              mountPath: "/etc/cadc-tap/kafka/user.key"
              readOnly: true
              subPath: "ssl.keystore.key"
          {{- end }}
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /tap/availability
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
      volumes:
        - name: "google-creds"
          secret:
            secretName: "cadc-tap"
        - name: "tmp"
          emptyDir:
            sizeLimit: 1Gi
        - name: "config-volume"
          configMap:
            name: "cadc-tap-config"
        - name: "tomcat-base"
          emptyDir:
            sizeLimit: 500Mi
        - name: "tomcat-logs"
          emptyDir:
            sizeLimit: 100Mi
        - name: "tomcat-home"
          emptyDir:
            sizeLimit: 100Mi
        - name: "tomcat-cache"
          emptyDir:
            sizeLimit: 2Gi
        - name: "ca-trust"
          emptyDir:
            sizeLimit: 50Mi
        {{- if .Values.config.kafka.enabled }}
        - name: "kafka-certs"
          secret:
            secretName: "cadc-tap-kafka-access"
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
