# Default values for influxdb-enterprise.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

nameOverride: ""
fullnameOverride: ""
imagePullSecrets: []

# License-key and license-path are mutually exclusive. Use only one and leave the other blank.
license:
  # You can put your license key here for testing this chart out,
  # but we STRONGLY recommend using a license file stored in a secret
  # when you ship to production.
  # key: ""
  # secret:
  #   name: influxdb-license
  #   key: json
  secret:
    name: influxdb-enterprise-license
    key: json
# Service account to use for deployment
# If the name is not specified default account will be used
serviceAccount:
  create: false
  name: ''
  annotations: {}

## The name of a secret in the same kubernetes namespace which contain values
## to be added to the environment.
## This can be used, for example, to set the INFLUXDB_ENTERPRISE_LICENSE_KEY
## or INFLUXDB_ENTERPRISE_LICENSE_PATH environment variable.
# envFromSecret: influxdb-license

# A secret with keys "username" and "password" is required
# This bootstrap configuration allows you to configure
# some parts of the InfluxDB system at install time.
#
# This job ONLY runs once, after the first `helm upgrade --install`
# or `helm install`
#
# This job WILL NOT run on upgrades
#
bootstrap:
  # This section allows you to enable authentication'
  # of the data nodes, which will create a username
  # and password for your "admin" account.
  # A secret should be provided, which will have the keys
  # "username" and "password" available.
  auth:
    secretName: sasquatch
  # This section allows you to use DDL and DML to define
  # databases, retention policies, and inject some data.
  # When using the configMap setting, the keys "ddl" and "dml"
  # must exist, even if one of them is empty.
  # DDL is executed before DML, to enforce databases and retention policies
  # to exist.
  ddldml: {}
  #   configMap: influxdb-ddl-dml
  #   resources: {}


# Sets the tagged version of the docker image that you want to run, will default to latest
# The suffix is if you are pulling from influx repo, example images will be influxdb:1.8.0-meta and influxdb:1.8.0-data
# If set to true, the suffix won't be added
#image:
#  tag: 1.11.3
#  ignoresuffix: false

meta:
  replicas: 3
  image: {}
  #   override: true
  #   pullPolicy: IfNotPresent
  #   repository: influxdb
  # nodeSelector: {}
  # tolerations: []
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 1
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: influxdb.influxdata.com/component
              operator: In
              values:
              - meta
          topologyKey: kubernetes.io/hostname
  # podAnnotations: {}
  #
  # podSecurityContext: {}
  #   fsGroup: 2000
  #
  # This allows you to run the pods as a non-privileged user, set to the uid
  # securityContext: {}
  #   runAsUser: 2000
  #   runAsGroup: 2000
  #  capabilities:
  #    drop:
  #    - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000
  #
  # These are the commands that will be run before influxdb is started
  # preruncmds:
  #   - cmd: ls -l
  #     description: We want to see what's in the directory
  #   - cmd: stat $HOME/somefile
  #     description: And we run a second command
  # This secret needs a key called "secret" and it should be a long random string
  # Please see docs for shared-internal-secret:
  # https://docs.influxdata.com/enterprise_influxdb/v1.8/administration/config-data-nodes/#meta-internal-shared-secret
  sharedSecret:
    secretName: influxdb-enterprise-shared-secret
  #
  service:
    ## Specify a service type
    ## ClusterIP is default
    ## ref: http://kubernetes.io/docs/user-guide/services/
    type: ClusterIP
    # loadBalancerIP: ""
    # externalIPs: []
    # externalTrafficPolicy: ""
    # nodePort: 30086
    ## Add annotations to service
    # annotations: {}
  # InfluxDB ingress configuration.
  ingress:
    enabled: false
    hostname: ""
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /$2
      nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    className: "nginx"
    path: /influxdb-enterprise-meta(/|$)(.*)
  ## Persist data to a persistent volume
  persistence:
    enabled: false
    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    # existingClaim:
    ## influxdb data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"
    # annotations:
    # accessMode: ReadWriteOnce
    # size: 8Gi
  podDisruptionBudget:
    minAvailable: 2
  ## Additional meta container environment variables.
  env: {}
  resources: {}

data:
  replicas: 1
  image: {}
  #   override: true
  #   pullPolicy: IfNotPresent
  #   repository: influxdb
  # nodeSelector: {}
  # tolerations: []
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 1
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: influxdb.influxdata.com/component
              operator: In
              values:
              - data
          topologyKey: kubernetes.io/hostname
  # podAnnotations: {}
  #
  # podSecurityContext: {}
  #   fsGroup: 2000
  #
  # This allows you to run the pods as a non-privileged user, set to the uid
  # securityContext: {}
  #   runAsUser: 2000
  #   runAsGroup: 2000
  #  capabilities:
  #    drop:
  #    - ALL
  #  capabilities:
  #    drop:
  #    - ALL
  #
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000
  #
  # These are the commands that will be run before influxdb is started
  # preruncmds:
  #   - cmd: ls -l
  #     description: We want to see what's in the directory
  #   - cmd: stat $HOME/somefile
  #     description: And we run a second command
  #
  service:
    ## Specify a service type
    ## ClusterIP is default
    ## ref: http://kubernetes.io/docs/user-guide/services/
    type: ClusterIP
    # loadBalancerIP: ""
    # externalIPs: []
    # externalTrafficPolicy: ""
    # nodePort: 30091
    ## Add annotations to service
    # annotations: {}
  # InfluxDB ingress configuration.
  ingress:
    enabled: false
    hostname: ""
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /$2
      nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    className: "nginx"
    path: /influxdb-enterprise-data(/|$)(.*)
  ## Persist data to a persistent volume
  persistence:
    enabled: false
    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    # existingClaim:
    ## influxdb data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"
    # annotations:
    # accessMode: ReadWriteOnce
    # size: 8Gi
  config:
    data:
      trace-logging-enabled: true
      wal-fsync-delay: "100ms"
      cache-max-memory-size: 0
    antiEntropy:
      enabled: true
    http:
      flux-enabled: true
      auth-enabled: true
    cluster:
      max-concurrent-queries: 1000
      query-timeout: "300s"
      log-queries-after: "15s"
    hintedHandoff:
      max-size: 107374182400
    continuousQueries:
      enabled: false
    logging:
      level: "debug"
  podDisruptionBudget:
    minAvailable: 1
  ## Additional data container environment variables e.g.:
  ##   INFLUXDB_HTTP_FLUX_ENABLED: "true"
  env: {}
  resources: {}
