{{- if .Values.ingestUpdated.enabled -}}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "ook.fullname" . }}-ingest-updated
  labels:
    {{- include "ook.labels" . | nindent 4 }}
    app.kubernetes.io/component: "ingest-updated"
    app.kubernetes.io/part-of: "ook"
spec:
  schedule: {{ .Values.ingestUpdated.schedule | quote }}
  concurrencyPolicy: "Forbid"
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      backoffLimit: 0
      ttlSecondsAfterFinished: {{ .Values.ingestUpdated.ttlSecondsAfterFinished }}
      template:
        metadata:
          {{- with .Values.ingestUpdated.podAnnotations }}
          annotations:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          labels:
            {{- include "ook.selectorLabels" . | nindent 12 }}
            app.kubernetes.io/component: "ingest-updated"
            app.kubernetes.io/part-of: "ook"
        spec:
          restartPolicy: "Never"
          automountServiceAccountToken: false
          {{- with .Values.imagePullSecrets }}
          imagePullSecrets:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          automountServiceAccountToken: false
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
          containers:
            - name: {{ .Chart.Name }}
              image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
              imagePullPolicy: {{ .Values.image.pullPolicy }}
              command:
                - "ook"
                - "ingest-updated"
                - "--window"
                - "{{ .Values.ingestUpdated.window }}"
              resources:
                {{- toYaml .Values.resources | nindent 16 }}
              envFrom:
                - configMapRef:
                    name: {{ include "ook.fullname" . }}
              env:
                # Writeable directory for concatenating certs. See "tmp" volume.
                - name: "KAFKA_CERT_TEMP_DIR"
                  value: "/tmp/kafka_certs"
                - name: "KAFKA_SECURITY_PROTOCOL"
                  value: "SSL"
                # From KafkaAccess
                - name: "KAFKA_BOOTSTRAP_SERVERS"
                  valueFrom:
                    secretKeyRef:
                      name: {{ template "ook.fullname" . }}-kafka
                      key: "bootstrapServers"
                - name: "KAFKA_CLUSTER_CA_PATH"
                  value: "/etc/kafkacluster/ca.crt"
                - name: "KAFKA_CLIENT_CERT_PATH"
                  value: "/etc/kafkauser/user.crt"
                - name: "KAFKA_CLIENT_KEY_PATH"
                  value: "/etc/kafkauser/user.key"
                # From Vault secrets
                - name: "ALGOLIA_APP_ID"
                  valueFrom:
                    secretKeyRef:
                      name: {{ template "ook.fullname" . }}
                      key: "ALGOLIA_APP_ID"
                - name: "ALGOLIA_API_KEY"
                  valueFrom:
                    secretKeyRef:
                      name: {{ template "ook.fullname" . }}
                      key: "ALGOLIA_API_KEY"
                - name: "OOK_DATABASE_PASSWORD"
                  valueFrom:
                    secretKeyRef:
                      name: {{ template "ook.fullname" . }}
                      key: "OOK_DATABASE_PASSWORD"
                - name: "OOK_GITHUB_APP_ID"
                  valueFrom:
                    secretKeyRef:
                      name: {{ template "ook.fullname" . }}
                      key: "OOK_GITHUB_APP_ID"
                - name: "OOK_GITHUB_APP_PRIVATE_KEY"
                  valueFrom:
                    secretKeyRef:
                      name: {{ template "ook.fullname" . }}
                      key: "OOK_GITHUB_APP_PRIVATE_KEY"
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                    - "all"
                readOnlyRootFilesystem: true
              volumeMounts:
                - name: "kafka"
                  mountPath: "/etc/kafkacluster/ca.crt"
                  subPath: "ssl.truststore.crt" # CA cert from the Kafka cluster
                - name: "kafka"
                  mountPath: "/etc/kafkauser/user.crt"
                  subPath: "ssl.keystore.crt" # User cert from the Kafka cluster signed by the clients' CA
                - name: "kafka"
                  mountPath: "/etc/kafkauser/user.key"
                  subPath: "ssl.keystore.key" # private key for the consuming client
                - name: "tmp"
                  mountPath: "/tmp/kafka_certs"
          {{- if .Values.cloudsql.enabled }}
          initContainers:
            {{- include "ook.cloudsqlSidecar" . | nindent 12 }}
          {{- end }}
          {{with .Values.nodeSelector }}
          nodeSelector:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.affinity }}
          affinity:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.tolerations }}
          tolerations:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumes:
            # This secret comes from the KafkaAccess operator
            - name: "kafka"
              secret:
                secretName: ook-kafka
            - name: "{{ template "ook.fullname" . }}"
              secret:
                secretName: {{ template "ook.fullname" . }}
            - name: "tmp"
              emptyDir: {}
{{- end }}
