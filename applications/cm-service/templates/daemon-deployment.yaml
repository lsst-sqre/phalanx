apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}-daemon
  labels:
    {{- include "application.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.daemon.replicaCount }}
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      {{- include "application.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: "daemon"
  template:
    metadata:
      annotations:
        {{- with .Values.daemon.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "application.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: "daemon"
    spec:
      securityContext:
        runAsUser: {{ .Values.daemon.security.uid }}
        runAsGroup: {{ .Values.daemon.security.gid }}
        fsGroup: {{ .Values.daemon.security.gid }}
        runAsNonRoot: {{ gt (int .Values.daemon.security.uid) 0 | ternary "true" "false" }}
      {{- with .Values.daemon.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      automountServiceAccountToken: false
      containers:
        - name: "{{ .Chart.Name }}-daemon"
          image: "{{ .Values.daemon.image.repository }}:{{ .Values.daemon.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.daemon.image.pullPolicy }}
          ports:
            - name: "http"
              containerPort: 8080
              protocol: "TCP"
          readinessProbe:
            httpGet:
              path: "/healthz"
              port: "http"
          livenessProbe:
            httpGet:
              path: "/healthz"
              port: "http"
          envFrom:
            - configMapRef:
                name: {{ .Chart.Name }}-env
            - configMapRef:
                name: {{ .Chart.Name }}-features-env
            - configMapRef:
                name: {{ .Chart.Name }}-butler-env
            - configMapRef:
                name: {{ .Chart.Name }}-htcondor-env
            - configMapRef:
                name: {{ .Chart.Name }}-panda-env
          env:
            - name: LSST_DB_AUTH_CREDENTIALS
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.config.butler.dbAuth.secretName }}
                  key: {{ .Values.config.butler.dbAuth.secretKey }}
            - name: DB__PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.config.db.secretName }}
                  key: {{ .Values.config.db.secretKey }}
            - name: PANDA__REFRESH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.config.panda.secretName }}
                  key: {{ .Values.config.panda.refreshTokenSecretKey }}
            - name: NOTIFICATIONS__SLACK_WEBHOOK_URL
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.config.slack.secretName }}
                  key: {{ .Values.config.slack.webhookUrlSecretKey }}
# {{- with .Values.config.aws }}
#             - name: AWS_ACCESS_KEY_ID
#               valueFrom:
#                 secretKeyRef:
#                   name: {{ .secretName }}
#                   key: {{ .defaultAccessKeyIdSecretKey }}
#             - name: AWS_SECRET_ACCESS_KEY
#               valueFrom:
#                 secretKeyRef:
#                   name: {{ .secretName }}
#                   key: {{ .defaultSecretAccessKeySecretKey }}
# {{- end }}
          resources:
            {{- toYaml .Values.daemon.resources | nindent 12 }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - "all"
            readOnlyRootFilesystem: true
          volumeMounts:
            - name: tmp-volume
              mountPath: "/tmp"
            - name: aws-config-volume
              mountPath: /etc/aws/config
              subPath: config
              readOnly: true
            - name: aws-credentials-volume
              mountPath: /etc/aws/credentials
              subPath: credentials
              readOnly: true
{{- with .Values.config.outputVolume }}
            - name: output-volume
              mountPath: {{ .mountPath }}
              subPath: {{ .subPath }}
{{- end }}
{{- with .Values.config.butler }}
            - name: butler-repo-volume
              mountPath: {{ .mountPath }}
              subPath: {{ .subPath }}
{{- end }}
{{- with .Values.config.htcondor.fsRemoteDir }}
            - name: condor-remote-volume
              mountPath: {{ .mountPath }}
              subPath: {{ .subPath }}
{{- end }}
      volumes:
        - name: aws-config-volume
          configMap:
            name: "{{ .Chart.Name }}-aws-config"
            items:
              -
                key: config
                path: config
        - name: aws-credentials-volume
          secret:
            secretName: {{ .Values.config.aws.secretName }}
            items:
              -
                key: {{ .Values.config.aws.credentialsFileSecretKey }}
                path: credentials
        - name: output-volume
          persistentVolumeClaim:
            claimName: {{ .Chart.Name }}-output
        - name: butler-repo-volume
          persistentVolumeClaim:
            claimName: {{ .Chart.Name }}-butler
        - name: tmp-volume
          emptyDir:
            sizeLimit: 500Mi
        - name: condor-remote-volume
          persistentVolumeClaim:
            claimName: {{ $.Chart.Name }}-htcondor
      {{- with .Values.daemon.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.daemon.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
