apiVersion: apps/v1
kind: Deployment

metadata:
  name: {{ template "alertDatabase.ingesterName" . }}
  labels:
    {{- include "alertDatabase.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "alertDatabase.ingesterSelectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "alertDatabase.ingesterSelectorLabels" . | nindent 8 }}
    spec:
      containers:
        - name: "alert-database-ingester"
          image: "lsstdm/alert_database_ingester:tickets-DM-44907"
          imagePullPolicy: "{{ .Values.ingester.image.imagePullPolicy}}"
          volumeMounts:
            - name: "kafka-client-secret"
              mountPath: "/etc/kafka-client-secret"
              readOnly: True
            - name: "kafka-server-ca-cert"
              mountPath: "/etc/kafka-server-ca-cert"
              readOnly: True
            {{- if .Values.ingester.s3.usdf }}
            - mountPath: /var/secrets/google
              name: alert-stream-broker-secrets
            {{- end }}

          command:
            - "alertdb-ingester"
            - "--kafka-host={{ .Values.ingester.kafka.cluster }}-kafka-bootstrap:{{ .Values.ingester.kafka.port }}"
            - "--kafka-topic={{ .Values.ingester.kafka.topic }}"
            - "--tls-client-key-location=/etc/kafka-client-secret/user.key"
            - "--tls-client-crt-location=/etc/kafka-client-secret/user.crt"
            - "--tls-server-ca-crt-location=/etc/kafka-server-ca-cert/ca.crt"
            - "--kafka-auth-mechanism=mtls"
            - "--schema-registry-address={{ required "A schema registry URL is required " .Values.ingester.schemaRegistryURL }}"
            - "--endpoint-url={{ required "An s3 endpoint url is required " .Values.storage.s3.endpointURL }}"
            - "--bucket-alerts={{ required "An alert bucket name is required " .Values.storage.s3.alertBucket }}"
            - "--bucket-schemas={{ required "A schema bucket name is required " .Values.storage.s3.schemaBucket }}"
            {{- if eq .Values.ingester.logLevel "debug" }}
            - "--debug"
            {{- end }}
            {{- if eq .Values.ingester.logLevel "verbose" }}
            - "--verbose"
            {{- end }}
          env:
          {{- if .Values.ingester.s3.usdf }}
            - name: "AWS_ENDPOINT_URL"
              value: {{ .Values.storage.s3.endpointURL }}
            - name: "AWS_ACCESS_KEY_ID"
              valueFrom:
                secretKeyRef:
                  name: alert-stream-broker-secrets
                  key: "AWS_ACCESS_KEY_ID"
            - name: "AWS_SECRET_ACCESS_KEY"
              valueFrom:
                secretKeyRef:
                  name: alert-stream-broker-secrets
                  key: "AWS_SECRET_ACCESS_KEY"
          {{- end }}


      volumes:
        - name: "kafka-client-secret"
          secret:
            secretName: "{{ .Values.ingester.kafka.user}}"
        - name: "kafka-server-ca-cert"
          secret:
            secretName: "{{ .Values.ingester.kafka.cluster}}-cluster-ca-cert"
        {{- if .Values.ingester.s3.usdf }}
        - name: alert-stream-broker-secrets
          secret:
            defaultMode: 420
            secretName: alert-stream-broker-secrets
        {{- end }}
      serviceAccountName: "{{ .Values.ingester.serviceAccountName }}"
