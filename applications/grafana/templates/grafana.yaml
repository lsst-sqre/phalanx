apiVersion: grafana.integreatly.org/v1beta1
kind: Grafana
metadata:
  name: grafana
  labels:
    dashboards: "grafana"
spec:
  persistentVolumeClaim:
    {{ .Values.grafana.spec.persistentVolumeClaim | toYaml | nindent 4 }}
  deployment:
    spec:
      template:
        spec:
          {{- if .Values.cloudsql.enabled }}
          serviceAccountName: grafana
          initContainers:
            {{ include "grafana.cloudsqlSidecar" . | nindent 12 }}
          {{- end }}
          containers:
            - name: "grafana"
              readinessProbe:
                failureThreshold: 3
              resources:
                {{- .Values.grafana.spec.resources | toYaml | nindent 16 }}
              env:
                - name: "GF_SECURITY_ADMIN_PASSWORD"
                  valueFrom:
                    secretKeyRef:
                      key: "grafana-admin-password"
                      name: grafana
                - name: "GF_DATABASE_PASSWORD"
                  valueFrom:
                    secretKeyRef:
                      key: "database-password"
                      name: grafana

          # https://github.com/grafana/grafana-operator/issues/1439#issuecomment-2677822604
          securityContext:
            fsGroup: 1001
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
          volumes:
            - name: "grafana-data"
              persistentVolumeClaim:
                claimName: grafana-pvc
      strategy:
        type: Recreate

  # -- Grafana instance config options.
  # [Docs](https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/)
  config:
    # -- Database connection information: [docs](https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/#database)
    database:
      {{ .Values.grafana.config.database | toYaml | nindent 6 }}
    security:
      # security.password is injected via the phalanx secret
      admin_user: {{ .Values.grafana.config.admin_user | quote }}
    server:
      domain: {{ .Values.global.host | quote }}
      root_url: "{{ .Values.global.baseUrl }}/{{ $.Values.grafana.pathPrefix }}"
      serve_from_subpath: "true"
    auth:
      # We'll assume that Gafaelfawr has already auth'd any requests that come in
      disable_login_form: {{ if .Values.grafana.authProxy.enabled }}"true"{{ else }}"false"{{ end }}
    auth.proxy:
      enabled: {{ if .Values.grafana.authProxy.enabled }}"true"{{ else }}"false"{{ end }}
      # HTTP Header name that will contain the username or email
      header_name: "X-Auth-Request-User"
      # HTTP Header property, `username` or `email`
      header_property: "username"
      # Set to `true` to enable auto sign up of users who do not exist in Grafana DB.
      auto_sign_up: "true"
      # Optionally define more headers to sync other user attributes
      # Example `headers = Name:X-WEBAUTH-NAME Role:X-WEBAUTH-ROLE Email:X-WEBAUTH-EMAIL Groups:X-WEBAUTH-GROUPS`
      # headers: "Email: X-Auth-Request-Email"

      # With enable_login_token set to true Grafana will, after successful
      # auth proxy header validation, assign the user a login token and
      # cookie. You only have to configure your auth proxy to provide
      # headers for the /login route. Requests via other routes will be
      # authenticated using the cookie.
      #
      # We set this to false here because Gafaelfawr will auth every request.
      enable_login_token: "false"
    log:
      level: {{ .Values.grafana.config.log.level | quote }}
    users:
      {{ .Values.grafana.config.users | toYaml | nindent 6 }}
