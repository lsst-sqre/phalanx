apiVersion: apps/v1
kind: Deployment
metadata:
  name: "qserv-kafka"
  labels:
    {{- include "qserv-kafka.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "qserv-kafka.selectorLabels" . | nindent 6 }}
  strategy:
    type: "Recreate"
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "qserv-kafka.selectorLabels" . | nindent 8 }}
        qserv-kafka-redis-client: "true"
    spec:
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      automountServiceAccountToken: false
      containers:
        - name: {{ .Chart.Name }}
          env:
            - name: "QSERV_KAFKA_QSERV_DATABASE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "qserv-kafka"
                  key: "qserv-password"
            - name: "QSERV_KAFKA_REDIS_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "qserv-kafka"
                  key: "redis-password"
            - name: "KAFKA_BOOTSTRAP_SERVERS"
              valueFrom:
                secretKeyRef:
                  name: "qserv-kafka-access"
                  key: "bootstrapServers"
            - name: "KAFKA_CLIENT_CERT_PATH"
              value: "/etc/qserv-kafka/user.crt"
            - name: "KAFKA_CLIENT_KEY_PATH"
              value: "/etc/qserv-kafka/user.key"
            - name: "KAFKA_CLUSTER_CA_PATH"
              value: "/etc/qserv-kafka/ca.crt"
            - name: "KAFKA_SECURITY_PROTOCOL"
              valueFrom:
                secretKeyRef:
                  name: "qserv-kafka-access"
                  key: "securityProtocol"
          envFrom:
            - configMapRef:
                name: "qserv-kafka"
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: "http"
              containerPort: 8080
              protocol: "TCP"
          readinessProbe:
            httpGet:
              path: "/"
              port: "http"
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - "all"
            readOnlyRootFilesystem: true
          volumeMounts:
            - name: "kafka"
              mountPath: "/etc/qserv-kafka/ca.crt"
              readOnly: true
              subPath: "ssl.truststore.crt"
            - name: "kafka"
              mountPath: "/etc/qserv-kafka/user.crt"
              readOnly: true
              subPath: "ssl.keystore.crt"
            - name: "kafka"
              mountPath: "/etc/qserv-kafka/user.key"
              readOnly: true
              subPath: "ssl.keystore.key"
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
      volumes:
        - name: "kafka"
          secret:
            secretName: "qserv-kafka-access"
