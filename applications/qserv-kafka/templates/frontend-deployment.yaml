apiVersion: apps/v1
kind: Deployment
metadata:
  name: "qserv-kafka"
  labels:
    {{- include "qserv-kafka.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "qserv-kafka.selectorLabels" . | nindent 6 }}
  strategy:
    type: "Recreate"
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- with .Values.frontend.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "qserv-kafka.selectorLabels" . | nindent 8 }}
        qserv-kafka-redis-client: "true"
    spec:
      {{- with .Values.frontend.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      automountServiceAccountToken: false
      containers:
        - name: {{ .Chart.Name }}
          env:
            {{- include "qserv-kafka.envVars" (dict "Values" .Values) | nindent 12 }}
            {{- if (and .Values.frontend.debug.enabled .Values.frontend.debug.disablePymalloc) }}
            - name: PYTHONMALLOC
              value: malloc
            {{- end }}
          envFrom:
          - configMapRef:
              name: "qserv-kafka"
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: "http"
              containerPort: 8080
              protocol: "TCP"
          readinessProbe:
            httpGet:
              path: "/"
              port: "http"
          resources:
            {{- toYaml .Values.frontend.resources | nindent 12 }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - "all"
            readOnlyRootFilesystem: true
          volumeMounts:
            - name: "kafka"
              mountPath: "/etc/qserv-kafka/ca.crt"
              readOnly: true
              subPath: "ssl.truststore.crt"
            - name: "kafka"
              mountPath: "/etc/qserv-kafka/user.crt"
              readOnly: true
              subPath: "ssl.keystore.crt"
            - name: "kafka"
              mountPath: "/etc/qserv-kafka/user.key"
              readOnly: true
              subPath: "ssl.keystore.key"
            {{- if .Values.frontend.debug.enabled }}
            - name: debug-storage
              mountPath: /debug
            {{- end }}
      {{- with .Values.frontend.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.frontend.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        runAsNonRoot: {{ not .Values.frontend.debug.enabled }}
        runAsUser: 1000
        runAsGroup: 1000
      volumes:
        - name: "kafka"
          secret:
            secretName: "qserv-kafka-access"
        {{- if .Values.frontend.debug.enabled }}
        - name: debug-storage
          persistentVolumeClaim:
            claimName: qserv-kafka-debug
        {{- end }}
