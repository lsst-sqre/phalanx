apiVersion: apps/v1
kind: Deployment
metadata:
  name: "butler"
  labels:
    {{- include "butler.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "butler.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        # Force the pod to restart when the config maps are updated.
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "butler.selectorLabels" . | nindent 8 }}
    spec:
      automountServiceAccountToken: false
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - "all"
            readOnlyRootFilesystem: true
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: "http"
              containerPort: 8080
              protocol: "TCP"
          readinessProbe:
            httpGet:
              path: "/"
              port: "http"
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            - name: AWS_SHARED_CREDENTIALS_FILE
              value: "/opt/lsst/butler/secrets/aws-credentials.ini"
            - name: PGPASSFILE
              value: "/opt/lsst/butler/secrets/postgres-credentials.txt"
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: "/opt/lsst/butler/secrets/butler-gcs-creds.json"
            - name: S3_ENDPOINT_URL
              value: {{ .Values.config.s3EndpointUrl | quote }}
            {{- range $name, $url := .Values.config.additionalS3EndpointUrls }}
            - name: LSST_RESOURCES_S3_PROFILE_{{ $name }}
              value: {{ $url }}
            {{ end }}
            - name: DAF_BUTLER_REPOSITORIES
              value: {{ .Values.config.repositories | toJson | quote }}
            # Serve the configuration files generated by configmap.yaml via
            # unauthenticated HTTP, for consumption by Butler users in RSP
            # notebook lab containers.
            # (There isn't another obvious place for these configuration files
            # to live, so we just have Butler server host them.)
            - name: DAF_BUTLER_SERVER_STATIC_FILES_PATH
              value: "/opt/lsst/butler/config"
            {{ if .Values.config.pguser }}
            - name: PGUSER
              value: {{ .Values.config.pguser | quote }}
            {{ end }}
          volumeMounts:
            - name: "butler-secrets"
              mountPath: "/opt/lsst/butler/secrets"
              readOnly: true
            # Mount configuration files generated in configmap.yaml.
            - name: config
              mountPath: "/opt/lsst/butler/config"
              readOnly: true
      volumes:
        # butler-secrets-raw pulls in the secrets from the vault as files.
        # These files are owned by root and group/world readable.
        # This volume is not used directly by the container running the actual
        # Butler application.
        - name: "butler-secrets-raw"
          secret:
            secretName: {{ include "butler.fullname" . }}
        # Postgres will not use a pgpass file (postgres-credentials.txt in the
        # vault) if it is group/world writeable or owned by a different user.
        # So the initContainers below copies the files from butler-secrets-raw
        # to butlet-secrets, changing the owner and permissions.
        # This volume is the one used by the container running the actual
        # Butler application.
        - name: "butler-secrets"
          emptyDir: {}
        - name: config
          configMap:
            name: butler
      initContainers:
        # To deal with the Postgres file permission issued mentioned above,
        # copy the secrets from butler-secrets-raw to butler-secrets.
        # This initContainer definition is borrowed from obsloctap's
        # deployment.yaml.
        - name: fix-secret-permissions
          image: {{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          command:
            - "/bin/sh"
            - "-c"
            - |
              cp -RL /tmp/butler-secrets-raw/* /opt/lsst/butler/secrets/
              chmod 0400 /opt/lsst/butler/secrets/*
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - "all"
          volumeMounts:
            - name: "butler-secrets"
              mountPath: "/opt/lsst/butler/secrets"
            - name: "butler-secrets-raw"
              mountPath: "/tmp/butler-secrets-raw"
              readOnly: true
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
