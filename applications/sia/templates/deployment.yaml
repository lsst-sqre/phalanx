apiVersion: apps/v1
kind: Deployment
metadata:
  name: "sia"
  labels:
    {{- include "sia.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "sia.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "sia.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      automountServiceAccountToken: false
      {{- if .Values.config.directButlerEnabled }}
      initContainers:
        - name: fix-secret-permissions
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          command:
            - "/bin/sh"
            - "-c"
            - |
              cp -RL /tmp/secrets-raw/* /etc/butler/secrets/
              chmod 0400 /etc/butler/secrets/*
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - "all"
          volumeMounts:
            - name: "secrets"
              mountPath: "/etc/butler/secrets"
            - name: "secrets-raw"
              mountPath: "/tmp/secrets-raw"
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          envFrom:
            - configMapRef:
                name: "sia"
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: "http"
              containerPort: 8080
              protocol: "TCP"
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: http
          readinessProbe:
            httpGet:
              path: /healthcheck
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            - name: "SIA_BUTLER_DATA_COLLECTIONS"
              value: {{ .Values.config.butlerDataCollections | toJson | quote }}
            - name: "SIA_ENVIRONMENT_NAME"
              value: {{ .Values.global.host }}
            {{- if .Values.config.slackAlerts }}
            - name: "SIA_SLACK_WEBHOOK"
              valueFrom:
                secretKeyRef:
                  name: "sia"
                  key: "slack-webhook"
            {{- end }}
            {{- if .Values.config.directButlerEnabled }}
            - name: "AWS_SHARED_CREDENTIALS_FILE"
              value: "/tmp/secrets/aws-credentials.ini"
            - name: "PGUSER"
              value: {{ .Values.config.pgUser }}
            - name: "PGPASSFILE"
              value: "/etc/butler/secrets/postgres-credentials.txt"
            - name: "GOOGLE_APPLICATION_CREDENTIALS"
              value: "/tmp/secrets/butler-gcs-idf-creds.json"
            {{- end }}
            {{- if .Values.config.enableSentry }}
            - name: "SIA_SENTRY_DSN"
              valueFrom:
                secretKeyRef:
                  name: {{ template "sia.fullname" . }}
                  key: "sentry-dsn"
            - name: "SIA_SENTRY_TRACES_SAMPLE_RATE"
              value: {{ .Values.config.sentryTracesSampleRate | quote }}
            {{- end }}
            {{- if .Values.config.metrics.enabled }}
            - name: "KAFKA_BOOTSTRAP_SERVERS"
              valueFrom:
                secretKeyRef:
                  name: "sia-kafka"
                  key: "bootstrapServers"
            - name: "KAFKA_SECURITY_PROTOCOL"
              valueFrom:
                secretKeyRef:
                  name: "sia-kafka"
                  key: "securityProtocol"
            - name: "KAFKA_CLIENT_CERT_PATH"
              value: "/etc/sia-kafka/user.crt"
            - name: "KAFKA_CLIENT_KEY_PATH"
              value: "/etc/sia-kafka/user.key"
            - name: "KAFKA_CLUSTER_CA_PATH"
              value: "/etc/sia-kafka/ca.crt"
            {{- end }}
          volumeMounts:
            {{- if .Values.config.metrics.enabled }}
            - name: "kafka"
              mountPath: "/etc/sia-kafka/ca.crt"
              readOnly: true
              subPath: "ssl.truststore.crt"
            - name: "kafka"
              mountPath: "/etc/sia-kafka/user.crt"
              readOnly: true
              subPath: "ssl.keystore.crt"
            - name: "kafka"
              mountPath: "/etc/sia-kafka/user.key"
              readOnly: true
              subPath: "ssl.keystore.key"
            {{- end }}
            {{- if .Values.config.directButlerEnabled }}
            - name: "secrets"
              mountPath: "/etc/butler/secrets"
              readOnly: true
            {{- end }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - "all"
            readOnlyRootFilesystem: false
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        {{- if .Values.config.metrics.enabled }}
        - name: "kafka"
          secret:
            secretName: "sia-kafka"
        {{- end }}
        {{- if .Values.config.directButlerEnabled }}
        - name: "secrets-raw"
          secret:
            secretName: "sia"
        - name: "secrets"
          emptyDir: {}
        {{- end }}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
