[project]
# https://packaging.python.org/en/latest/specifications/declaring-project-metadata/
name = "phalanx"
version = "1.0.0"
description = "Python support code for the Rubin Phalanx platform."
license = {file = "LICENSE"}
readme= "README.md"
keywords = [
    "rubin",
    "lsst",
]
# https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Intended Audience :: Developers",
    "Operating System :: POSIX",
]
requires-python = ">=3.11"
dependencies = [
    "bcrypt",
    "click",
    "cryptography",
    "GitPython",
    "hvac",
    "jinja2",
    "onepasswordconnectsdk",
    "pydantic>2",
    "PyYAML",
    "safir>5",
]

[project.scripts]
phalanx = "phalanx.cli:main"

[project.urls]
Homepage = "https://phalanx.lsst.io"
Source = "https://github.com/lsst-sqre/phalanx"

[build-system]
requires = [
    "setuptools>=61",
    "wheel",
    "setuptools_scm[toml]>=6.2"
]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]

[tool.black]
line-length = 79
target-version = ["py312"]

[tool.coverage.run]
parallel = true
branch = true
source = ["phalanx"]

[tool.coverage.paths]
source = ["src", ".tox/*/site-packages"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:"
]

[tool.mypy]
disallow_untyped_defs = true
disallow_incomplete_defs = true
ignore_missing_imports = true
local_partial_types = true
no_implicit_reexport = true
plugins = ["pydantic.mypy"]
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.pytest.ini_options]
# The python_files setting is not for test detection (pytest will pick up any
# test files named *_test.py without this setting) but to enable special
# assert processing in any non-test supporting files under tests. We
# conventionally put test support functions under tests.support and may
# sometimes use assert in test fixtures in conftest.py, and pytest only
# enables magical assert processing (showing a full diff on assert failures
# with complex data structures rather than only the assert message) in files
# listed in python_files.
python_files = [
    "tests/*.py",
    "tests/*/*.py"
]

# The rule used with Ruff configuration is to disable every lint that has
# legitimate exceptions that are not dodgy code, rather than cluttering code
# with noqa markers. This is therefore a reiatively relaxed configuration that
# errs on the side of disabling legitimate lints.
#
# Reference for settings: https://beta.ruff.rs/docs/settings/
# Reference for rules: https://beta.ruff.rs/docs/rules/
[tool.ruff]
extend = "ruff-shared.toml"

[tool.ruff.lint.extend-per-file-ignores]
"src/phalanx/**" = [
    "T201",    # print makes sense to use because Phalanx is interactive
]

[tool.ruff.lint.isort]
known-first-party = ["phalanx", "tests"]
split-on-trailing-comma = false
